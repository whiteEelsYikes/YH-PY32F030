





.equ stack_size, 0x00001000
.global stack_size
    .section .stack
    .align 3
__stack_mem:
    .global __stack_mem
    .align 3
    .zero stack_size
__initial_sp:
    .align 3
    .global __initial_sp




    .section .isr_vector
    .align 2
__vectors:
    .global __vectors
                .long     __initial_sp              @ Top of Stack
                .long     Reset_Handler+1             @ Reset Handler
                .long     NMI_Handler+1               @ NMI Handler
                .long     HardFault_Handler+1         @ Hard Fault Handler
                .long     0                         @ Reserved
                .long     0                         @ Reserved
                .long     0                         @ Reserved
                .long     0                         @ Reserved
                .long     0                         @ Reserved
                .long     0                         @ Reserved
                .long     0                         @ Reserved
                .long     SVC_Handler               @ SVCall Handler
                .long     0                         @ Reserved
                .long     0                         @ Reserved
                .long     PendSV_Handler            @ PendSV Handler
                .long     SysTick_Handler           @ SysTick Handler

                @ External Interrupts
                .long     WWDG_IRQHandler                @ 0Window Watchdog
                .long     PVD_IRQHandler                 @ 1PVD through EXTI Line detect
                .long     RTC_IRQHandler                 @ 2RTC through EXTI Line
                .long     FLASH_IRQHandler               @ 3FLASH
                .long     RCC_IRQHandler                 @ 4RCC
                .long     EXTI0_1_IRQHandler             @ 5EXTI Line 0 and 1
                .long     EXTI2_3_IRQHandler             @ 6EXTI Line 2 and 3
                .long     EXTI4_15_IRQHandler            @ 7EXTI Line 4 to 15
                .long     0                              @ 8Reserved
                .long     DMA1_Channel1_IRQHandler       @ 9DMA1 Channel 1
                .long     DMA1_Channel2_3_IRQHandler     @ 10DMA1 Channel 2 and Channel 3
                .long     0                              @ 11Reserved
                .long     ADC_COMP_IRQHandler            @ 12ADC&COMP1
                .long     TIM1_BRK_UP_TRG_COM_IRQHandler @ 13TIM1 Break, Update, Trigger and Commutation
                .long     TIM1_CC_IRQHandler             @ 14TIM1 Capture Compare
                .long     0                              @ 15Reserved
                .long     TIM3_IRQHandler                @ 16TIM3
                .long     LPTIM1_IRQHandler              @ 17LPTIM1
                .long     0                              @ 18Reserved
                .long     TIM14_IRQHandler               @ 19TIM14
                .long     0                              @ 20Reserved
                .long     TIM16_IRQHandler               @ 21TIM16
                .long     TIM17_IRQHandler               @ 22TIM17
                .long     I2C1_IRQHandler                @ 23I2C1
                .long     0                              @ 24Reserved
                .long     SPI1_IRQHandler                @ 25SPI1
                .long     SPI2_IRQHandler                @ 26SPI2
                .long     USART1_IRQHandler              @ 27USART1
                .long     USART2_IRQHandler              @ 28USART2
                .long     0                              @ 29Reserved
                .long     LED_IRQHandler                 @ 30LED
                .long     0                              @ 31Reserved




    .section .data
    .align 2
GPIOA_ADD:
                .long 0x50000000
    .align 2
GPIOx_BSRR:
                .long 0x50000018
    .align 2
GPIOx_OTYPER:
                .long 0x50000004
    .align 2
                .equ GPIOA_BASE, 0x50000000UL   // GPIOA 基地址
                .global GPIOA_BASE
                .equ RCC_BASE, 0x40021000UL     // RCC 基地址
                .equ RCC_IOPENR_OFFSET, 0x34  // RCC IOPENR 寄存器偏移
                .equ GPIO_MODER_OFFSET, 0x00  // GPIO 模式寄存器偏移
                .equ GPIO_OTYPER_OFFSET, 0x04 // GPIO 输出类型寄存器偏移
                .equ GPIO_OSPEEDR_OFFSET, 0x08 // GPIO 端口输出速度寄存器
                .equ GPIO_PUPDR_OFFSET, 0x0C  // GPIO 上拉/下拉寄存器偏移
                .equ GPIO_IDR_OFFSET, 0x10  // GPIO 端口输入数据寄存器
                .equ GPIO_ODR_OFFSET, 0x14  // GPIO 端口输出数据寄存器
                .global GPIO_ODR_OFFSET
                .equ GPIO_BSRR_OFFSET, 0x18   // GPIO 端口位设置/复位寄存器
                .equ GPIO_LCKR_OFFSET, 0x1C   // GPIO 端口配置锁定寄存器
                .equ GPIO_AFRL_LOW_OFFSET, 0x20  // GPIO 复用功能寄存器(low)
                .equ GPIO_AFRL_HIGH_OFFSET, 0x24  // GPIO 复用功能寄存器(high)
                .equ GPIO_BRR_OFFSET, 0x28   // GPIO 端口位复位寄存器



    .thumb


    .section .text
    .thumb
    .align 2

Reset_Handler:  @ Reset Handler
    .global  Reset_Handler
    .weak Reset_Handler
    .align 2
                //bkpt #0
                CPSID I // 屏蔽所有可屏蔽中断
                add r0, r0, #1
                mov r0, #10
                add r1, r0, r0
                ldr r0, =_start+1
                bx R0
                //bkpt #0


led2_h:
    .global led2_h
    .weak led2_h
    .align 2
                bkpt #0
                @ldr r0, [sp] // 读取堆栈中的返回地址 
                @add r0, r0, #1 // 确保最低有效位为1 
                @str r0, [sp] // 将修改后的地址写回堆栈 
                @bx lr // 返回到修正后的地址

                bl _start
                bl led2_h




.global _start

_start:
    // 使能 GPIOA 时钟
    fail_loop:
    //bkpt #0
    ldr r0, =RCC_BASE + RCC_IOPENR_OFFSET  // RCC IOPENR 寄存器地址
    ldr r1, [r0]
    ldr r2, =0x1                // 加载立即数，使能 GPIOA 时钟
    orr r1, r1, r2              // 设置位
    str r1, [r0]

    // 确认使能时钟
    ldr r1, [r0]
    //ldr r2, =0x1
    tst r1, r2
    beq fail_loop               // 如果时钟未使能，进入失败循环

    // 设置 GPIOA2 为通用输出模式
    ldr r0, =GPIOA_BASE + GPIO_MODER_OFFSET
    ldr r1, [r0]
    ldr r2, =0xEBFFFD5F         // 加载立即数
    and r1, r1, r2              // 清除模式位
    ldr r2, =0x10               // 加载立即数
    orr r1, r1, r2              // 设置为输出模式
    str r1, [r0]

    // 设置 GPIOA2 为推挽输出
    ldr r0, =GPIOA_BASE + GPIO_OTYPER_OFFSET
    ldr r1, [r0]
    ldr r2, =0x0         // 加载立即数
    and r1, r1, r2              // 设置为推挽输出
    str r1, [r0]

    // 设置 GPIOA2 端口输出速度
    ldr r0, =GPIOA_BASE + GPIO_OSPEEDR_OFFSET
    ldr r1, [r0]
    ldr r2, =0x0C0002A0         // 加载立即数
    str r1, [r0]
    
    
    // 设置 GPIOA2 为上拉模式
    ldr r0, =GPIOA_BASE + GPIO_PUPDR_OFFSET
    ldr r1, [r0]
    ldr r2, =0x24000150         // 加载立即数
    and r1, r1, r2              // 清除上拉/下拉设置
    ldr r2, =0x10               // 加载立即数
    orr r1, r1, r2              // 设置为上拉
    str r1, [r0]

    // 设置 GPIOA2 输出低电平 (点亮 LED)
    ldr r0, =GPIOA_BASE + GPIO_BRR_OFFSET
    ldr r1, =0x40000            // 加载立即数，设置 GPIOA2 复位为低电平
    str r1, [r0]
    //negs r0, r0
    .extern main
    //bkpt #0
    ldr r0, =main
    //blx main
    //bkpt #0
    // 无限循环
    mov r0, #0
    .equ count, 1000000
    ldr r2, =count
loop:
    cmp r2, r0
    bcc not_led
    add r0, r0, #1
    b loop
not_led:
    mov r0, #0
    // 设置 GPIOA2 输出反转 not bi
    ldr r3, =GPIOA_BASE + GPIO_ODR_OFFSET
    ldr r1, [r3]
    mvn r1, r1
    str r1, [r3]
    b loop











test:
    .global test
    .weak test
    .align 2
                bkpt #0

                ldr r0, =0x40021000
                ldr r1, =#0xFFFFFFFF
                ldr r1, [r0, #0x34]

                ldr r0, =GPIOA_ADD
                ldr r0, [r0]
                
                ldr r1, =#0x0
                str r1, [r0, #0]  // GPIO 端口模式寄存器 (GPIOx_MODER) (x=A, B, F)
                str r1, [r0, #0x0C]  // GPIO 端口上下拉寄存器(GPIOx_PUPDR) (x = A, B, F)

                ldr r1, =#0xFFFFFFFF
                str r1, [r0, #0x04]  // GPIO 端口输出类型寄存器(GPIOx_OTYPER) (x = A, B, F)
                str r1, [r0, #0x18] // GPIO 端口位设置/复位寄存器(GPIOx_BSRR) (x = A, B, F)

                @ldr r2, [GPIOA_PUPDR] 
                @ldr r2, [r2] // 从 GPIOA_PUPDR 地址加载数据
                bx lr


@ Dummy Exception Handlers (infinite loops which can be modified)
NMI_Handler:
    .global  NMI_Handler
    .weak NMI_Handler
    .align 2
                bkpt #0
                bx lr

HardFault_Handler:
    .global  HardFault_Handler
    .weak HardFault_Handler
    .align 2
                bkpt #0
                bx lr

SVC_Handler:
    .global  SVC_Handler
    .weak SVC_Handler
    .align 2
                bkpt #0
                bx lr

PendSV_Handler:
    .global  PendSV_Handler
    .weak PendSV_Handler
    .align 2
                bx lr

SysTick_Handler:
    .global  SysTick_Handler
    .weak SysTick_Handler
    .align 2
                bx lr


Default_Handler:
    .align 2

                .global  WWDG_IRQHandler
                .weak WWDG_IRQHandler
                .global  PVD_IRQHandler
                .weak PVD_IRQHandler
                .global  RTC_IRQHandler
                .weak RTC_IRQHandler
                .global  FLASH_IRQHandler
                .weak FLASH_IRQHandler
                .global  RCC_IRQHandler
                .weak RCC_IRQHandler
                .global  EXTI0_1_IRQHandler
                .weak EXTI0_1_IRQHandler
                .global  EXTI2_3_IRQHandler
                .weak EXTI2_3_IRQHandler
                .global  EXTI4_15_IRQHandler
                .weak EXTI4_15_IRQHandler
                .global  DMA1_Channel1_IRQHandler
                .weak DMA1_Channel1_IRQHandler
                .global  DMA1_Channel2_3_IRQHandler
                .weak DMA1_Channel2_3_IRQHandler
                .global  ADC_COMP_IRQHandler
                .weak ADC_COMP_IRQHandler
                .global  TIM1_BRK_UP_TRG_COM_IRQHandler
                .weak TIM1_BRK_UP_TRG_COM_IRQHandler
                .global  TIM1_CC_IRQHandler
                .weak TIM1_CC_IRQHandler
                .global  TIM3_IRQHandler
                .weak TIM3_IRQHandler
                .global  LPTIM1_IRQHandler
                .weak LPTIM1_IRQHandler
                .global  TIM14_IRQHandler
                .weak TIM14_IRQHandler
                .global  TIM16_IRQHandler
                .weak TIM16_IRQHandler
                .global  TIM17_IRQHandler
                .weak TIM17_IRQHandler
                .global  I2C1_IRQHandler
                .weak I2C1_IRQHandler
                .global  SPI1_IRQHandler
                .weak SPI1_IRQHandler
                .global  SPI2_IRQHandler
                .weak SPI2_IRQHandler
                .global  USART1_IRQHandler
                .weak USART1_IRQHandler
                .global  USART2_IRQHandler
                .weak USART2_IRQHandler
                .global  LED_IRQHandler
                .weak LED_IRQHandler
 
WWDG_IRQHandler:
PVD_IRQHandler:
RTC_IRQHandler:
FLASH_IRQHandler:
RCC_IRQHandler:
EXTI0_1_IRQHandler:
EXTI2_3_IRQHandler:
EXTI4_15_IRQHandler:
DMA1_Channel1_IRQHandler:
DMA1_Channel2_3_IRQHandler:
ADC_COMP_IRQHandler:
TIM1_BRK_UP_TRG_COM_IRQHandler:
TIM1_CC_IRQHandler:
TIM3_IRQHandler:
LPTIM1_IRQHandler:
TIM14_IRQHandler:
TIM16_IRQHandler:
TIM17_IRQHandler:
I2C1_IRQHandler:
SPI1_IRQHandler:
SPI2_IRQHandler:
USART1_IRQHandler:
USART2_IRQHandler:
LED_IRQHandler:
    .align 2
                b .
  
